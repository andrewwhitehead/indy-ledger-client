name: "Unit Tests"

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master

jobs:
  workflow-setup:
    name: Setup CI variables
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_VDR_BINARY: ${{ steps.mainstep.outputs.key }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v1
      - id: mainstep
        name: Calculate cache key
        run: |
          echo ::set-output name=key::${{ hashFiles('libindy_vdr') }}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: docker build -f ci/indy-pool.dockerfile -t test_pool --build-arg pool_ip=10.0.0.2 ci
      - run: docker network create --subnet=10.0.0.0/8 indy-sdk-network
      - run: docker run -d --name indy_pool -p 9701-9708:9701-9708 --net=indy-sdk-network test_pool
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build-vdr-binary:
    needs: workflow-setup
    name: Build IndyVDR binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Try load libindy_vdr binary from cache.
        id: cache-vdr
        uses: actions/cache@v2
        with:
          key: ${{ needs.workflow-setup.outputs.CACHE_KEY_VDR_BINARY }}
          path: /tmp/libindy_vdr.so
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-vdr.outputs.cache-hit != 'true'
        run: |
          set -x
          cargo build --release --manifest-path libindy_vdr/Cargo.toml --target-dir libindy_vdr/target
          cp libindy_vdr/target/release/libindy_vdr.so /tmp/libindy_vdr.so

  test-nodejs:
    needs: [workflow-setup, build-vdr-binary]
    name: Test NodeJS wrapper
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Load libindy_vdr binary from cache.
        id: cache-vdr
        uses: actions/cache@v2
        with:
          key: ${{ needs.workflow-setup.outputs.CACHE_KEY_VDR_BINARY }}
          path: /tmp/libindy_vdr.so
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-vdr.outputs.cache-hit != 'true'
        run: |
          echo "Expected to find indy vdr binaries in cache."
          exit -1
      - name: Install libindy_vdr
        run: sudo cp /tmp/libindy_vdr.so /usr/lib/libindy_vdr.so
      - name: Install NodeJS dependencies
        run: |
          cd wrappers/nodejs
          npm install
      - name: Transpile NodeJS wrapper
        run: |
          cd wrappers/nodejs
          npm run compile
      - name: Run NodeJS unit tests
        run: |
          cd wrappers/nodejs
          npm run test:unit
      - name: Run NodeJS integration tests against Sovrin Buildernet
        run: |
          cd wrappers/nodejs
          INDY_NETWORK=SOVRIN_BUILDER_NET npm run test:integration

#   clippy:
#     name: Clippy
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions-rs/toolchain@v1
#         with:
#           profile: minimal
#           toolchain: stable
#           override: true
#       - run: rustup component add clippy
#       - uses: actions-rs/cargo@v1
#         with:
#           command: clippy
#           args: -- -D warnings
